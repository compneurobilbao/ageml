[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "ageml"
version = "0.2.0"
description = "AgeML is a Python package for Age Modelling with Machine Learning made easy."
authors = [ "Computational Neuroimaging Lab Bilbao, IIS Biobizkaia",
            "jorge.garcia.condado <jorgegarciacondado@gmail.com>",
            "inigo.tellaetxe <inigotellaetxe@gmail.com>",
            "asier.erramuzpe <aerramuzpe@gmail.com>",
            "jesus.cortes <jesus.m.cortes@gmail.com>"
            ]
maintainers = ["jorge.garcia.condado <jorgegarciacondado@gmail.com>",
                "inigo.tellaetxe <inigotellaetxe@gmail.com>"
                ]
readme = "README.md"
repository = "https://github.com/compneurobilbao/ageml"
license = "Apache 2.0"
keywords = ["Machine Learning", "Age Modelling", "Brain Age"]
classifiers = ["Topic :: Software Development :: Libraries :: Python Modules"]
packages = [{include = "ageml", from = "src"}]

[tool.poetry.dependencies]
python = ">=3.9,<3.12"
numpy = ">=1.24, <2.0.0"
pandas = ">=2.0.2"
scipy = ">=1.10"
statsmodels = "0.14.0"
matplotlib = "3.5"
scikit-learn = "1.3"
xgboost = "^2.0.3"
pillow = "^10.3.0"
hpsklearn-compneurobilbao = "*"

[tool.poetry.dev-dependencies]
# Testing and linting tool
nox-poetry = "*"
coverage-conditional-plugin = "^0.7.0"
# Pre-commit
pre-commit = "^3.0.0"
# Testing
pytest = "*"
pytest-cov = "*"
coverage_conditional_plugin = "*"
# Linting
flake8 = "*"
flake8-bugbear = "*"
flake8-broken-line = "*"
flake8-comprehensions = "*"
# Formatting
ruff = "^0.3.0"

[tool.poetry.scripts]
ageml = "ageml.__main__:main"
model_age = "ageml.commands:model_age"
factor_correlation = "ageml.commands:factor_correlation"
clinical_groups = "ageml.commands:clinical_groups"
clinical_classify = "ageml.commands:clinical_classify"
generate_ageml_data = "ageml.datasets.generate_synthetic_data:main"

[tool.poetry.group.dev.dependencies]
ipykernel = "^6.29.0"

[tool.ruff]
line-length = 140

[tool.ruff.lint]
ignore = ["F403",# Imported but unused
"F403",# Unable to detect undefined names
"B028",# No explicit stacklevel keyword argument found
"W293",# blank line contains whitespace (I don't like this rule, interferes with good function indentation)
"C419",# Unnecessary list comprehension passed to all() prevents short-circuiting - rewrite as a generator
"E702",# Multiple statements on one line (semicolon)
"B023",# Function definition does not bind loop variable 'some_var_name'.
]

[tool.coverage.run]
plugins = ["coverage_conditional_plugin"]
